import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
                java.srcDirs = ['src']
                res.srcDirs = ['res']
                jniLibs.srcDirs = ['libs']
        }
    }

    // call regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec) {
        workingDir = file("${android.sdkDirectory}/ndk-bundle")
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'ndk-build.cmd', '-C', file('.').absolutePath,
				'-j', Runtime.runtime.availableProcessors()
            } else {
                commandLine './ndk-build', '-C', file('.').absolutePath,
				'-j', Runtime.runtime.availableProcessors()
            }
    }

    /*tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }*/

    // cleanup task
    task ndkClean(type: Exec) {
        workingDir = file("${android.sdkDirectory}/ndk-bundle")
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'ndk-build.cmd', '-C', file('.').absolutePath, 'clean'
            } else {
                commandLine './ndk-build', '-C', file('.').absolutePath, 'clean'
            }
    }

    /*tasks.withType(Delete) {
        cleanTask -> cleanTask.dependsOn ndkClean
    }*/
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}