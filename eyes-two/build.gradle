import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            aidl.srcDirs = ['src']
            java.srcDirs = ['src']
            res.srcDirs = ['res']
            jniLibs.srcDirs = ['libs']
        }
    }

    // call regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec) {
        workingDir = file("${android.sdkDirectory}/ndk-bundle")
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine 'ndk-build.cmd', '-C', file('.').absolutePath,
			'-j', Runtime.runtime.availableProcessors()
        } else {
            commandLine './ndk-build', '-C', file('.').absolutePath,
			'-j', Runtime.runtime.availableProcessors()
        }
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    // cleanup task
    task ndkClean(type: Exec) {
        workingDir = file("${android.sdkDirectory}/ndk-bundle")
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine 'ndk-build.cmd', '-C', file('.').absolutePath, 'clean'
        } else {
            commandLine './ndk-build', '-C', file('.').absolutePath, 'clean'
        }
    }

    tasks.withType(Delete) {
        cleanTask -> cleanTask.dependsOn ndkClean
    } 

    lintOptions {
        abortOnError false
    }

}

dependencies {
    compile project(':tess-two');
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
